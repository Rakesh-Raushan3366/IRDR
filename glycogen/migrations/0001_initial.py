# Generated by Django 4.2.1 on 2023-06-15 04:57

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0012_alter_opd_attendance_date_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='profile_glycogen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gl_final_dignosis', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_date_of_record', models.DateField(blank=True, null=True)),
                ('gl_clinical_exam_date', models.DateField(blank=True, null=True)),
                ('gl_date_of_birth', models.DateField(null=True)),
                ('gl_patient_name', models.CharField(max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_father_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_mother_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_paitent_id', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('gl_paitent_id_list', models.CharField(blank=True, choices=[('Aadhar card', 'Aadhar card'), ('Driving license', 'Driving license'), ('Voter id', 'Voter id'), ('Rations card', 'Rations card'), ('PAN card', 'PAN card'), ('BPL card', 'BPL card'), ('SECC card', 'SECC card'), ('Aabha Id', 'Aabha Id')], max_length=100, null=True)),
                ('gl_patient_id_no', models.CharField(blank=True, max_length=100, null=True, unique=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_patient_age', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_mother_father_id', models.CharField(blank=True, choices=[('Aadhar card', 'Aadhar card'), ('Driving license', 'Driving license'), ('Voter id', 'Voter id'), ('Rations card', 'Rations card'), ('PAN card', 'PAN card'), ('BPL card', 'BPL card'), ('SECC card', 'SECC card'), ('Aabha Id', 'Aabha Id')], max_length=100, null=True)),
                ('gl_mother_father_id_no', models.PositiveBigIntegerField(blank=True, null=True, unique=True)),
                ('gl_permanent_addr', models.CharField(blank=True, max_length=500, null=True, validators=[django.core.validators.MaxLengthValidator(500)])),
                ('gl_city_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_country_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_mother_mobile_no', models.PositiveBigIntegerField(null=True)),
                ('gl_father_mobile_no', models.PositiveBigIntegerField(blank=True, null=True)),
                ('gl_land_line_no', models.IntegerField(blank=True, null=True)),
                ('gl_email', models.EmailField(blank=True, max_length=300, null=True)),
                ('gl_religion', models.CharField(blank=True, choices=[('Hindu', 'Hindu'), ('Muslim', 'Muslim'), ('Christian', 'Christian'), ('Sikh', 'Sikh'), ('Others', 'Others')], max_length=100, null=True)),
                ('gl_caste', models.CharField(blank=True, choices=[('Scheduled caste', 'Scheduled caste'), ('Scheduled tribe', 'Scheduled tribe'), ('Others', 'Others')], max_length=100, null=True)),
                ('gl_referred_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_referred_by', models.CharField(blank=True, choices=[('General practitioner', 'General practitioner'), ('Physician', 'Physician'), ('Neurologist', 'Neurologist'), ('Any others', 'Any others')], max_length=100, null=True)),
                ('gl_referred_by_desc', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', ' Female'), ('Transgender', 'Transgender')], max_length=100, null=True)),
                ('gl_consent_given', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_consent_upload', models.FileField(null=True, upload_to='uploads/%Y/%m/%d/')),
                ('gl_assent_given', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_assent_upload', models.FileField(null=True, upload_to='uploads/%Y/%m/%d/')),
                ('gl_hospital_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_hospital_reg_no', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_icmr_unique_no', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('quality_status', models.CharField(blank=True, choices=[('Pending', 'Pending'), ('Resubmitted', 'Resubmitted'), ('Completed', 'Completed')], max_length=20, null=True)),
                ('quality_result', models.CharField(blank=True, choices=[('Pass', 'Pass'), ('Fail', 'Fail')], max_length=10, null=True)),
                ('quality_reason', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('uniqueId', models.CharField(blank=True, max_length=500, null=True)),
                ('complete', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Na', 'Na')], default='No', max_length=10, null=True)),
                ('gl_district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.district', verbose_name=' district')),
                ('gl_state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.state', verbose_name=' state')),
                ('qa_register', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='qa_register_glycogen', to='account.register')),
                ('qa_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='qa_user_glycogen', to=settings.AUTH_USER_MODEL)),
                ('register', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='account.register')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='demographic_glycogen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gl_patient_edu_status', models.CharField(blank=True, choices=[('Illiterate', 'Illiterate'), ('Primary', 'Primary'), ('High School', 'High School'), ('Secondary level', 'Secondary level'), ('College and above', 'College and above')], max_length=50, null=True)),
                ('gl_patient_occupation', models.CharField(blank=True, choices=[('Employed (organised sector)', 'Employed (organised sector)'), ('Employed (Unorganised sector)', 'Employed (Unorganised sector)'), ('Others', 'Others')], max_length=50, null=True)),
                ('gl_father_edu_status', models.CharField(blank=True, choices=[('Illiterate', 'Illiterate'), ('Primary', 'Primary'), ('High School', 'High School'), ('Secondary level', 'Secondary level'), ('College and above', 'College and above')], max_length=50, null=True)),
                ('gl_father_occupation', models.CharField(blank=True, choices=[('Employed (organised sector)', 'Employed (organised sector)'), ('Employed (Unorganised sector)', 'Employed (Unorganised sector)'), ('Others', 'Others')], max_length=50, null=True)),
                ('gl_mother_edu_status', models.CharField(blank=True, choices=[('Illiterate', 'Illiterate'), ('Primary', 'Primary'), ('High School', 'High School'), ('Secondary level', 'Secondary level'), ('College and above', 'College and above')], max_length=50, null=True)),
                ('gl_mother_occupation', models.CharField(blank=True, choices=[('Home maker', 'Home maker)'), ('Employed (organised sector)', 'Employed (organised sector)'), ('Employed (Unorganised sector)', 'Employed (Unorganised sector)'), ('Others', 'Others')], max_length=50, null=True)),
                ('gl_monthly_income_status', models.CharField(blank=True, choices=[('> 126,360', '> 126,360)'), ('63,182 – 126,356)', '63,182 – 126,356)'), ('47,266 – 63,178', '47,266 – 63,178'), ('31,591 - 47,262', '31,591 - 47,262'), ('18,953 - 31,589', '18,953 - 31,589'), ('6,327 - 18,949', '6,327 - 18,949'), ('< 6,323', '< 6,323')], max_length=50, null=True)),
                ('gl_presenting_complaints_specify', models.CharField(blank=True, max_length=200, null=True)),
                ('gl_anth_wght_pat', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_wght_per', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_wght_sd', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_height_pat', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_height_per', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_height_sd', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_head_cir_pat', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_head_cir_perc', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_anth_head_cir_sd', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_presenting_complaints_years', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_months', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_day', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_intrauterine', models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No')], max_length=10, null=True)),
                ('gl_presenting_complaints_age_presentation_years', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_presentation_months', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_presentation_day', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_presentation_intrauterine', models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No')], max_length=10, null=True)),
                ('gl_presenting_complaints_age_diagnosis_years', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_diagnosis_months', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_diagnosis_day', models.IntegerField(blank=True, null=True)),
                ('gl_presenting_complaints_age_diagnosis_intrauterine', models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No')], max_length=10, null=True)),
                ('gl_onset_age', models.DateField(blank=True, null=True)),
                ('gl_present_age', models.DateField(blank=True, null=True)),
                ('gl_diag_age', models.DateField(blank=True, null=True)),
                ('gl_pedigree_upload', models.FileField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/')),
                ('gl_fam_hist_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_fam_hist_descr', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_cons_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_cons_degree_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_anti_natal_altra', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal')], max_length=10, null=True)),
                ('antenatal_ultrasound_if_abnormal', models.CharField(blank=True, choices=[('Polyhydramnios', 'Polyhydramnios'), ('Hydrops', 'Hydrops'), ('Other', 'Other')], max_length=100, null=True)),
                ('gl_antenatal_ultrasound_status', models.CharField(blank=True, choices=[('Present', 'Present'), ('Absent', 'Absent')], max_length=10, null=True)),
                ('gl_other_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_delivery_type', models.CharField(blank=True, choices=[('Caesarean', 'Caesarean'), ('Vaginal', 'Vaginal')], max_length=10, null=True)),
                ('gl_baby_cried_after_del', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_nicu_stay', models.CharField(blank=True, max_length=10, null=True)),
                ('gl_resusciation_yes_no', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_resusciation_req', models.CharField(blank=True, choices=[('Ventilation', 'Ventilation'), ('O2 Support', 'O2 Support'), ('CPAP', 'CPAP'), ('Other', 'Other')], max_length=50, null=True)),
                ('gl_resusciation_req_other', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_birth_weight', models.FloatField(blank=True, null=True)),
                ('gl_dev_milestone', models.CharField(blank=True, choices=[('Delayed', 'Delayed'), ('Normal', 'Normal')], max_length=15, null=True)),
                ('gl_dev_motor_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_dev_global_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_dev_cognitive_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_morn_leth_seiz', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_dev_delay', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_irritability', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_tremors', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_muscle_weak_floppy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_exerc_cramping', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_abdominal_dist', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_jaundice', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_over_hunger', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_vomiting', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_diarrhia', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_weight_gain_fail', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_oral_ulcers', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_perianal_ulcar', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rec_infections', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rec_infections_type', models.CharField(blank=True, choices=[('Diarrhoea', 'Diarrhoea'), ('Respiratory', 'Respiratory'), ('skin', 'skin'), ('Other', 'Other')], max_length=15, null=True)),
                ('gl_rec_infections_type_other', models.CharField(blank=True, max_length=15, null=True)),
                ('gl_bony_deforminty', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_site_bleeding', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_site_bleeding_type', models.CharField(blank=True, choices=[('epistaxis', 'epistaxis'), ('hemetemesis', 'hemetemesis'), ('Per rectum', 'Per rectum')], max_length=15, null=True)),
                ('gl_polyurea', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_puberty_delay', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_joint_pain', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_exertion_dyspnoea', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('hepatomegalySize', models.FloatField(blank=True, max_length=10, null=True)),
                ('hepatomegalySpan', models.CharField(blank=True, max_length=10, null=True)),
                ('hepatomegalyLeftLobe', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('hepatomegalyConsistencyChoice', models.CharField(blank=True, choices=[('Firm', 'Firm'), ('Soft', 'Soft'), ('Hard', 'Hard')], max_length=10, null=True)),
                ('hepatomegalysurfaceChoice', models.CharField(blank=True, choices=[('Smooth', 'Smooth'), ('Nodular', 'Nodular'), ('Granular', 'Granular')], max_length=10, null=True)),
                ('hepatomegalyMarginChoice', models.CharField(blank=True, choices=[('Sharp', 'Sharp'), ('Rounded', 'Rounded')], max_length=10, null=True)),
                ('gl_doll_like_face', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_hepatomegaly', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_hepatomegaly_type', models.CharField(blank=True, choices=[('Size (cm) BCM', 'Size (cm) BCM'), ('Span', 'Span'), ('Left lobe enlargement', 'Left lobe enlargement'), ('Consistency', 'Consistency'), ('Margins', 'Margins')], max_length=32, null=True)),
                ('gl_hepatomegaly_left_lobe_enlargement', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_hepatomegaly_consistency', models.CharField(blank=True, choices=[('Soft', 'Soft'), ('Firm', 'Firm'), ('Firm', 'Firm')], max_length=10, null=True)),
                ('gl_hepatomegaly_margin', models.CharField(blank=True, choices=[('Round', 'Round'), ('Sharp', 'Sharp')], max_length=10, null=True)),
                ('gl_splenomegaly', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_splenomegaly_size', models.FloatField(blank=True, null=True)),
                ('gl_renal_enlargement', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rachitic_changes', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_hypotonia', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('IIQChoice', models.CharField(blank=True, choices=[('Done', 'Done'), ('Not Done', 'Not Done')], max_length=10, null=True)),
                ('DQChoice', models.CharField(blank=True, choices=[('Done', 'Done'), ('Not Done', 'Not Done')], max_length=10, null=True)),
                ('IQValue', models.CharField(blank=True, max_length=20, null=True)),
                ('DQValue', models.CharField(blank=True, max_length=20, null=True)),
                ('gl_iq_status', models.CharField(blank=True, choices=[('Perform', 'Perform'), ('Not perform', 'Not perform')], max_length=50, null=True)),
                ('gl_iq_value', models.FloatField(blank=True, null=True)),
                ('gl_any_other_findings', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_cong_heart_fail', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_core_pulomonable', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_hypertension', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_inv_hb', models.FloatField(blank=True, null=True)),
                ('gl_inv_wbc', models.FloatField(blank=True, null=True)),
                ('gl_inv_platelet_count', models.FloatField(blank=True, null=True)),
                ('gl_inv_anc', models.FloatField(blank=True, null=True)),
                ('gl_inv_abs_neutrophil_count', models.FloatField(blank=True, null=True)),
                ('gl_inv_pt_sec', models.FloatField(blank=True, null=True)),
                ('gl_inv_aptt_sec', models.FloatField(blank=True, null=True)),
                ('gl_inv_ph', models.FloatField(blank=True, null=True)),
                ('gl_inv_hco_3', models.FloatField(blank=True, null=True)),
                ('gl_inv_lactate', models.FloatField(blank=True, null=True)),
                ('gl_inv_anion_gap', models.FloatField(blank=True, null=True)),
                ('gl_inv_fasting_sugar', models.FloatField(blank=True, null=True)),
                ('gl_inv_s_cal', models.FloatField(blank=True, null=True)),
                ('gl_inv_s_phosphorous', models.FloatField(blank=True, null=True)),
                ('gl_inv_s_alkaline', models.FloatField(blank=True, null=True)),
                ('gl_inv_total_bilirubin', models.FloatField(blank=True, null=True)),
                ('gl_inv_direct_bilirubin', models.FloatField(blank=True, null=True)),
                ('gl_inv_total_protien', models.FloatField(blank=True, null=True)),
                ('gl_inv_serum_albumin', models.FloatField(blank=True, null=True)),
                ('gl_inv_sgpt', models.FloatField(blank=True, null=True)),
                ('gl_inv_sgot', models.FloatField(blank=True, null=True)),
                ('gl_inv_ggt', models.FloatField(blank=True, null=True)),
                ('gl_inv_serum_urea', models.FloatField(blank=True, null=True)),
                ('gl_inv_serum_creatinine', models.FloatField(blank=True, null=True)),
                ('gl_inv_micro_alb', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gl_inv_proteinuria', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gl_inv_hypercal', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gl_Hypercalciuria', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gi_Hypocitrauria', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gl_inv_hypercitrauria', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('gl_inv_bld', models.FloatField(blank=True, null=True)),
                ('gl_inv_tg', models.FloatField(blank=True, null=True)),
                ('gl_inv_tc', models.FloatField(blank=True, null=True)),
                ('gl_inv_vldl', models.FloatField(blank=True, null=True)),
                ('gl_inv_hdl', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_ldl', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_iron', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_tibc', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_vit_d', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_pth', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_s_uric_acid', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_s_cpk', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_s_afp', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_biotinidase', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal')], max_length=50, null=True)),
                ('gl_inv_biotinidase_if_abnormal', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_inv_tms', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal')], max_length=50, null=True)),
                ('gl_inv_tms_if_abnormal_value', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_theroid_function_test', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal')], max_length=50, null=True)),
                ('gl_inv_t_3', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_inv_t_4', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_inv_tsh', models.CharField(blank=True, max_length=50, null=True)),
                ('gl_inv_urine', models.IntegerField(blank=True, null=True)),
                ('gl_ketosis', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('urine_ketosis', models.CharField(blank=True, choices=[('0', '0'), ('1+', '1+'), ('2+', '2+'), ('3+', '3+'), ('4+', '4+')], max_length=50, null=True)),
                ('gl_rad_ultrasonography', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rad_ultrasono_type', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal')], max_length=10, null=True)),
                ('gl_rad_ultra_finding_ab_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_rad_liversize', models.FloatField(blank=True, null=True)),
                ('gl_rad_liverEchotexture', models.CharField(blank=True, max_length=10, null=True)),
                ('gl_rad_Kidney', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rad_hepatic', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rad_kidney_size', models.IntegerField(blank=True, null=True)),
                ('gl_rad_spleen_size', models.FloatField(blank=True, null=True)),
                ('gl_rad_Echotexture', models.FloatField(blank=True, null=True)),
                ('gl_rad_lymphnodes_size', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_rad_portal_vien_dia', models.IntegerField(blank=True, null=True)),
                ('gl_rad_adenoma', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_renal_par_pathalogy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_renal_par_pathalogy_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_nephrocalcinosis', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_pancreatitis', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_cholethiasis', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_xray_bone_age', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Delayed', 'Delayed')], max_length=10, null=True)),
                ('gl_echocardiography_status', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal'), ('Not Done', 'Not Done')], max_length=20, null=True)),
                ('gl_echo_abnormal_cardio', models.BooleanField(default=False)),
                ('gl_echo_abnormal_mention_lvmi', models.CharField(blank=True, max_length=20, null=True)),
                ('gl_echo_abnormal_volvular_spcify', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.MaxLengthValidator(10)])),
                ('gl_volvular_stenosis', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_volvular_mitral1', models.BooleanField(default=False)),
                ('gl_volvular_tricuspid1', models.BooleanField(default=False)),
                ('gl_volvular_aortic1', models.BooleanField(default=False)),
                ('gl_volvular_pulmonary1', models.BooleanField(default=False)),
                ('gl_volvular_mitral2', models.BooleanField(default=False)),
                ('gl_volvular_tricuspid2', models.BooleanField(default=False)),
                ('gl_volvular_aortic2', models.BooleanField(default=False)),
                ('gl_volvular_pulmonary2', models.BooleanField(default=False)),
                ('gl_volvular_stenosis_options', models.CharField(blank=True, choices=[('mitral', 'mitral'), ('tricuspid', ' tricuspid'), ('aortic', 'aortic'), ('pulmonary', 'pulmonary')], max_length=20, null=True)),
                ('gl_volvular_regurgitation', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_volvular_regurgitation_options', models.CharField(blank=True, choices=[('mitral', 'mitral'), ('tricuspid', ' tricuspid'), ('aortic', 'aortic'), ('pulmonary', 'pulmonary')], max_length=20, null=True)),
                ('gl_ejection_fraction', models.CharField(blank=True, max_length=20, null=True)),
                ('gl_liver_muscle', models.CharField(blank=True, choices=[('Done', 'Done'), ('Not Done', 'Not Done')], max_length=20, null=True)),
                ('gl_live_histopathology', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, null=True)),
                ('gl_live_histopathology_val', models.CharField(blank=True, max_length=20, null=True)),
                ('gl_Muscule_histopathology', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, null=True)),
                ('gl_Muscule_histopathology_val', models.CharField(blank=True, max_length=20, null=True)),
                ('gl_liver_muscle_findings_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_enzyme_assay', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_enzyme_assay_report', models.FileField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/')),
                ('gl_enzyme_assay_type', models.CharField(blank=True, choices=[('Serum', 'Serum'), ('Plasma', 'Plasma'), ('Leucocyte', 'Leucocyte'), ('RBC', 'RBC'), ('Liver', 'Liver'), ('Muscle', 'Muscle'), ('DBS', 'DBS'), ('whole blood', 'whole blood')], max_length=20, null=True)),
                ('gl_patient_value', models.FloatField(blank=True, null=True)),
                ('gl_normal_control', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_normal_range', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_mol_diagnosis_desc_gene_seq', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_mol_diagnosis_report', models.FileField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/')),
                ('gl_dna_seq', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Abnormal', 'Abnormal'), ('Not Done', 'Not Done')], max_length=20, null=True)),
                ('gl_abormal_patient', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_abormal_father', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_abormal_mother', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_treat_diet_alone', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_treat_diet_anti_lipic', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_treat_diet_anti_lipic_hypouricemia', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_treat_diet_anti_hypouricemia', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_supportive_therapy', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_any_surgery', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_any_surgery_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_any_organ_transplantation', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('gl_any_organ_transplantation_specify', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_any_other_info', models.CharField(blank=True, max_length=500, null=True, validators=[django.core.validators.MaxLengthValidator(500)])),
                ('gl_filled_by_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_clinical_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('gl_date', models.DateField(blank=True, null=True)),
                ('gl_date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('Causative_DNA_sequence_variation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=20, null=True)),
                ('molecular_upload', models.FileField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/')),
                ('Patient_molecular', models.CharField(blank=True, max_length=100, null=True)),
                ('Gene_molecula', models.CharField(blank=True, max_length=100, null=True)),
                ('trans_molecul', models.CharField(blank=True, max_length=100, null=True)),
                ('gl_dna1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_pro1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_var1', models.CharField(blank=True, choices=[('Novel', 'Novel '), ('Reported', 'Reported')], max_length=100, null=True)),
                ('gl_zygo1', models.CharField(blank=True, choices=[('Homozygous', 'Homozygous '), ('Heterozygous', 'Heterozygous'), ('Hemizygous', 'Hemizygous')], max_length=100, null=True)),
                ('gl_var_cla1', models.CharField(blank=True, choices=[('Pathogenic ', 'Pathogenic '), ('Likely Pathogenic', 'Likely Pathogenic'), ('Variant of uncertain significance ', 'Variant of uncertain significance')], max_length=100, null=True)),
                ('gl_dna2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_pro2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('gl_var2', models.CharField(blank=True, choices=[('Novel', 'Novel '), ('Reported', 'Reported')], max_length=100, null=True)),
                ('gl_zygo2', models.CharField(blank=True, choices=[('Homozygous', 'Homozygous '), ('Heterozygous', 'Heterozygous'), ('Hemizygous', 'Hemizygous')], max_length=100, null=True)),
                ('gl_var_cla2', models.CharField(blank=True, choices=[('Pathogenic ', 'Pathogenic '), ('Likely Pathogenic', 'Likely Pathogenic'), ('Variant of uncertain significance ', 'Variant of uncertain significance')], max_length=100, null=True)),
                ('gl_seg', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('father', models.CharField(blank=True, max_length=100, null=True)),
                ('mother', models.CharField(blank=True, max_length=100, null=True)),
                ('gl_Finaldiagnosis_other', models.CharField(blank=True, max_length=100, null=True)),
                ('gl_Finaldiagnosis', models.CharField(choices=[('Glyogen storage disorder Type Ia(Von Gierke)', 'Glyogen storage disorder Type Ia(Von Gierke)'), ('Glyogen storage disorder Type Ib', 'Glyogen storage disorder Type Ib'), ('Glyogen storage disorder Type IIIa(Cori/Forbes)', 'Glyogen storage disorder Type IIIa(Cori/Forbes)'), ('Glyogen storage disorder Type IIIb', 'Glyogen storage disorder Type IIIb'), ('Glyogen storage disorder Type IVa(Anderson)', 'Glyogen storage disorder Type IVa(Anderson)'), ('Glyogen storage disorder Type VI(Hers)', 'Glyogen storage disorder Type VI(Hers)'), ('Glyogen storage disorder Type XIa(Phosphorylase kinase deficiency)', 'Glyogen storage disorder Type XIa(Phosphorylase kinase deficiency)'), ('Glyogen storage disorder Type0(Glycogen synthases deficiency)', 'Glyogen storage disorder Type0(Glycogen synthases deficiency'), ('Glyogen storage disorder TypeXI(Fanconi-Bickel Syndrome)', 'Glyogen storage disorder TypeXI(Fanconi-Bickel Syndrome)'), ('Other', 'Other')], max_length=100, null=True)),
                ('gl_Finaloutcomes', models.CharField(choices=[('Death', 'Death'), ('Alive', 'Alive'), ('Followup required', 'Followup required'), ('Unknown', 'Unknown')], max_length=100, null=True)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_glycogen', to='glycogen.profile_glycogen')),
                ('register', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='account.register')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
